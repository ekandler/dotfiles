#include <iostream>
#include <intrin.h>
#include "RandomGen.h"
#include <vector>
#include <list>
#include <algorithm>

using namespace std;

// configuration
int const NumberOfTests = 20;
int const n = 10000;
int const MAX = 1000;

// retreiving time stamp counter of CPU
__int64 ReadTSC() {
	int dummy[4];			// for unused returns
	volatile int DontSkip;	// volatile to prevent optimization
	__int64 clock = 0;		// cycles
	__cpuid(dummy, 0);		// serialize to prevent out-of-order execution
	DontSkip = dummy[0];	// prevent optimizing away cpuid
	clock = __rdtsc();		// read time stamp counter
	__cpuid(dummy, 0);		// serialize to prevent out-of-order execution
	DontSkip = dummy[0];	// prevent optimizing away cpuid
	return clock;			// cycles since CPU start
}


void InsertSorted(vector<int> cont, int value) {
	vector<int>::iterator iter = lower_bound( cont.begin(), cont.end(), value);
	cont.insert(iter, value);
}

void InsertSorted(vector<int> cont, int value) {
	vector<int>::iterator iter = lower_bound( cont.begin(), cont.end(), value);
	cont.insert(iter, value);
}
// original implementation - one array after another
__int64 OriginalImplementation(int value) {

	__int64 timeDiff[NumberOfTests] = {0}; // array for measured values
	__int64 start = 0;
	__int64 stop = 0;

	volatile int a[n] = {0};
	volatile int b[n] = {0};
	volatile double c[n] = {0.0};
	volatile double d[n] = {0.0};

	// fill with random values
	for (int i = 0; i < n; ++i) {
		a[i] = rgen::GetRandVal(0, MAX);
		b[i] = rgen::GetRandVal(0, MAX);
		c[i] = rgen::GetRandVal(0, MAX) * 1.1f;
		d[i] = rgen::GetRandVal(0, MAX) * 1.2f;
	}

	// tests
	for (int i = 0; i < NumberOfTests; i++) {
		start = ReadTSC();
		
		MultIntArr(a, n, value);
		SubIntArr(b, n, value);
		DivDoubleArr(c, n, value);
		AddDoubleArr(d, n, value);
		
		timeDiff[i] = ReadTSC() - start;
	}

	// output
	cout << "Duration_Old: ";
	__int64 best = 0;
	for (int i = 0; i < NumberOfTests; i++) {
		cout << timeDiff[i] << " " ;
		if (best == 0 || timeDiff[i] < best) best = timeDiff[i];
	}

	// return best value
	return best;
}

// new implementation: all arrays in one loop
__int64 NewImplementation(int value) {

	__int64 timeDiff[NumberOfTests] = {0}; // array for measured values
	__int64 start = 0;
	__int64 stop = 0;

	volatile int a[n] = {0};
	volatile int b[n] = {0};
	volatile double c[n] = {0.0};
	volatile double d[n] = {0.0};


	// fill with random values
	for (int i = 0; i < n; ++i) {
		a[i] = rgen::GetRandVal(0, MAX);
		b[i] = rgen::GetRandVal(0, MAX);
		c[i] = rgen::GetRandVal(0, MAX) * 1.1f;
		d[i] = rgen::GetRandVal(0, MAX) * 1.2f;
	}

	// new
	for (int i = 0; i < NumberOfTests; i++) {
		start = ReadTSC();
		
		for (int j = 0; j<n; ++j) {
			a[j] *= value;
			b[j] -= value;
			c[j] /= value;
			d[j] += value;
		}
		timeDiff[i] = ReadTSC() - start;
	}

	// output
	cout << endl << "Duration_New: ";
	__int64 best = 0;
	for (int i = 0; i < NumberOfTests; i++) {
		cout << timeDiff[i] << " " ;
		if (best == 0 || timeDiff[i] < best) best = timeDiff[i];
	}

	// return best value
	return best;
}


int main() {
	
	std::vector<int> vect;
	InsertSorted(1);
	InsertSorted(13);
	InsertSorted(5);
	InsertSorted(6);
	InsertSorted(2);
	InsertSorted(7);
	InsertSorted(8);
	InsertSorted(10);

	return 0;
}

